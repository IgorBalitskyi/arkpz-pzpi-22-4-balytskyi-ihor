Харківський університет радіоелектроніки 
Факультет комп'ютерних наук 
Кафедра програмної інженерії 
ЗВІТ 
до практичної роботи з дисципліни
"Аналіз та рефакторинг коду"
на тему: "Правила оформлення програмного коду"
Виконав ст. гр ПЗПІ-22-4 
 Балицький Ігор Олександрович
Перевірив 
ст. викл. кафедри ПІ
Сокорчук Ігор Петрович 










Харків 2024


1


Назва теми: «Правила оформлення програмного коду» 
Балицький І.О. ПЗПІ-22-4
01.01.2025


2


Вступ

У світі розробки програмного забезпечення дотримання правил оформлення коду є ключовим фактором для забезпечення читабельності, підтримуваності та надійності. Для мови програмування Solidity, яка використовується для створення смарт-контрактів на блокчейні Ethereum, правильне оформлення коду є особливо важливим. Це сприяє зменшенню помилок, підвищенню безпеки та забезпеченню зручності для інших розробників, які можуть працювати над вашим проектом у майбутньому. У цій роботі ми розглянемо основні правила оформлення коду в Solidity, наведемо приклади та пояснення їхньої важливості.


3


Загальні правила оформлення коду

1. Використовуйте осмислені назви змінних, функцій та контрактів

Опис: Імена мають бути зрозумілими та самодокументованими. Це спрощує читання та розуміння коду.

Приклад:

// Поганий приклад
contract X {
    uint a;

    function f(uint b) public {
        a = b;
    }
}

// Гарний приклад
contract Wallet {
    uint256 balance;

    function setBalance(uint256 newBalance) public {
        balance = newBalance;
    }
}

Чіткі імена змінних і функцій дозволяють швидко зрозуміти призначення кожного елемента коду без додаткових пояснень.


4



2. Додавайте коментарі лише там, де це необхідно

Опис: Коментарі мають пояснювати складну логіку, але не повторювати очевидне.

Приклад:

// Поганий приклад
uint256 total = 100; // Задаємо змінну total рівну 100

// Гарний приклад
// Максимальна кількість токенів, які можуть бути випущені
uint256 maxSupply = 1000000;

Обґрунтування: Надмірна кількість коментарів може перевантажити код, тоді як їх відсутність ускладнює розуміння складних алгоритмів.


5


3. Дотримуйтеся єдиного стилю форматування

Опис: Використовуйте однаковий стиль відступів, дужок і пробілів у всьому проекті.

Приклад:

// Поганий приклад
function transfer(address to,uint256 amount) public {
    require(balance >= amount,"Insufficient balance");
    balance-=amount;to.transfer(amount);
}

// Гарний приклад
function transfer(address to, uint256 amount) public {
    require(balance >= amount, "Insufficient balance");
    balance -= amount;
    to.transfer(amount);
}

Чітке форматування покращує читабельність та допомагає уникнути помилок через неправильне вирівнювання.


6


4. Робіть функції короткими та вузько сфокусованими

Опис: Одна функція має виконувати одну логічну задачу.

Приклад:

// Поганий приклад
function processTransaction(address to, uint256 amount) public {
    require(balance >= amount, "Insufficient balance");
    balance -= amount;
    to.transfer(amount);
    emit TransferCompleted(to, amount);
}


7


// Гарний приклад
function validateBalance(uint256 amount) private view {
    require(balance >= amount, "Insufficient balance");
}

function executeTransfer(address to, uint256 amount) private {
    balance -= amount;
    to.transfer(amount);
}

function processTransaction(address to, uint256 amount) public {
    validateBalance(amount);
    executeTransfer(to, amount);
    emit TransferCompleted(to, amount);
}

Обґрунтування: Короткі функції легше тестувати, підтримувати та повторно використовувати.



8



5. Структуруйте проект

Опис: Розподіляйте код за файлами відповідно до його логіки.

Приклад:

contracts/
    Token.sol       // Основний контракт токена
    Crowdsale.sol   // Контракт для управління продажами токенів
    Utils.sol       // Допоміжні функції та бібліотеки

Обґрунтування: Логічно розділений код спрощує його навігацію, тестування та підтримку.



9


Приклад коду до та після форматування

До форматування:

contract Example{uint a;function f(uint b)public {a=b;}}

Після форматування:

contract Example {
    uint256 value;

    function setValue(uint256 newValue) public {
        value = newValue;
    }
}



10


Висновки

Дотримання правил оформлення коду є основою якісної розробки. Це забезпечує читабельність, зменшує кількість помилок та сприяє ефективній співпраці в команді. 


11


Список використаних джерел

1. Martin Fowler. Refactoring: Improving the Design of Existing Code.
2. Офіційна документація Solidity.


Додаток А
Посилання на відеозапис - https://youtu.be/7xolhx7aF_0



Додаток Б
Презентація
